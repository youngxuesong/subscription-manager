{
  "version": 3,
  "sources": ["../bundle-sQOpRk/checked-fetch.js", "file:///C:/Users/young/AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts", "file:///C:/Users/young/AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/loader-sw.ts", "file:///C:/Users/young/AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "file:///C:/Users/young/AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-sQOpRk/middleware-insertion-facade.js", "../../../node_modules/src/src/IttyRouter.ts", "../../../node_modules/src/src/Router.ts", "../../../node_modules/src/src/createResponse.ts", "../../../node_modules/src/src/json.ts", "../../../node_modules/src/src/error.ts", "../../../node_modules/src/src/withParams.ts", "../../../node_modules/src/src/AutoRouter.ts", "../../../node_modules/src/src/StatusError.ts", "../../../node_modules/src/src/status.ts", "../../../node_modules/src/src/text.ts", "../../../node_modules/src/src/html.ts", "../../../node_modules/src/src/jpeg.ts", "../../../node_modules/src/src/png.ts", "../../../node_modules/src/src/webp.ts", "../../../node_modules/src/src/withContent.ts", "../../../node_modules/src/src/withCookies.ts", "../../../node_modules/src/src/cors.ts", "../../../src/telegram.js", "../../../src/commands/start.js", "../../../src/kv.js", "../../../src/commands/add.js", "../../../src/commands/list.js", "../../../src/commands/delete.js", "../../../src/commands/info.js", "../../../src/cron.js", "../../../src/handler.js", "../../../index.js"],
  "sourceRoot": "D:\\project\\SubsTracker\\.wrangler\\tmp\\dev-zlhSBP",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "import {\n\t__facade_invoke__,\n\t__facade_register__,\n\t__facade_registerInternal__,\n\tAwaitable,\n\tDispatcher,\n\tIncomingRequest,\n\tMiddleware,\n} from \"./common\";\n\nexport { __facade_register__, __facade_registerInternal__ };\n\n// Miniflare 2's `EventTarget` follows the spec and doesn't allow exceptions to\n// be caught by `dispatchEvent`. Instead it has a custom `ThrowingEventTarget`\n// class that rethrows errors from event listeners in `dispatchEvent`.\n// We'd like errors to be propagated to the top-level `addEventListener`, so\n// we'd like to use `ThrowingEventTarget`. Unfortunately, `ThrowingEventTarget`\n// isn't exposed on the global scope, but `WorkerGlobalScope` (which extends\n// `ThrowingEventTarget`) is. Therefore, we get at it in this nasty way.\nlet __FACADE_EVENT_TARGET__: EventTarget;\nif ((globalThis as any).MINIFLARE) {\n\t__FACADE_EVENT_TARGET__ = new (Object.getPrototypeOf(WorkerGlobalScope))();\n} else {\n\t__FACADE_EVENT_TARGET__ = new EventTarget();\n}\n\nfunction __facade_isSpecialEvent__(\n\ttype: string\n): type is \"fetch\" | \"scheduled\" {\n\treturn type === \"fetch\" || type === \"scheduled\";\n}\nconst __facade__originalAddEventListener__ = globalThis.addEventListener;\nconst __facade__originalRemoveEventListener__ = globalThis.removeEventListener;\nconst __facade__originalDispatchEvent__ = globalThis.dispatchEvent;\n\nglobalThis.addEventListener = function (type, listener, options) {\n\tif (__facade_isSpecialEvent__(type)) {\n\t\t__FACADE_EVENT_TARGET__.addEventListener(\n\t\t\ttype,\n\t\t\tlistener as EventListenerOrEventListenerObject,\n\t\t\toptions\n\t\t);\n\t} else {\n\t\t__facade__originalAddEventListener__(type, listener, options);\n\t}\n};\nglobalThis.removeEventListener = function (type, listener, options) {\n\tif (__facade_isSpecialEvent__(type)) {\n\t\t__FACADE_EVENT_TARGET__.removeEventListener(\n\t\t\ttype,\n\t\t\tlistener as EventListenerOrEventListenerObject,\n\t\t\toptions\n\t\t);\n\t} else {\n\t\t__facade__originalRemoveEventListener__(type, listener, options);\n\t}\n};\nglobalThis.dispatchEvent = function (event) {\n\tif (__facade_isSpecialEvent__(event.type)) {\n\t\treturn __FACADE_EVENT_TARGET__.dispatchEvent(event);\n\t} else {\n\t\treturn __facade__originalDispatchEvent__(event);\n\t}\n};\n\ndeclare global {\n\tvar addMiddleware: typeof __facade_register__;\n\tvar addMiddlewareInternal: typeof __facade_registerInternal__;\n}\nglobalThis.addMiddleware = __facade_register__;\nglobalThis.addMiddlewareInternal = __facade_registerInternal__;\n\nconst __facade_waitUntil__ = Symbol(\"__facade_waitUntil__\");\nconst __facade_response__ = Symbol(\"__facade_response__\");\nconst __facade_dispatched__ = Symbol(\"__facade_dispatched__\");\n\nclass __Facade_ExtendableEvent__ extends Event {\n\t[__facade_waitUntil__]: Awaitable<unknown>[] = [];\n\n\twaitUntil(promise: Awaitable<any>) {\n\t\tif (!(this instanceof __Facade_ExtendableEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\tthis[__facade_waitUntil__].push(promise);\n\t}\n}\n\ninterface FetchEventInit extends EventInit {\n\trequest: Request;\n\tpassThroughOnException: FetchEvent[\"passThroughOnException\"];\n}\n\nclass __Facade_FetchEvent__ extends __Facade_ExtendableEvent__ {\n\t#request: Request;\n\t#passThroughOnException: FetchEvent[\"passThroughOnException\"];\n\t[__facade_response__]?: Awaitable<Response>;\n\t[__facade_dispatched__] = false;\n\n\tconstructor(type: \"fetch\", init: FetchEventInit) {\n\t\tsuper(type);\n\t\tthis.#request = init.request;\n\t\tthis.#passThroughOnException = init.passThroughOnException;\n\t}\n\n\tget request() {\n\t\treturn this.#request;\n\t}\n\n\trespondWith(response: Awaitable<Response>) {\n\t\tif (!(this instanceof __Facade_FetchEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\tif (this[__facade_response__] !== undefined) {\n\t\t\tthrow new DOMException(\n\t\t\t\t\"FetchEvent.respondWith() has already been called; it can only be called once.\",\n\t\t\t\t\"InvalidStateError\"\n\t\t\t);\n\t\t}\n\t\tif (this[__facade_dispatched__]) {\n\t\t\tthrow new DOMException(\n\t\t\t\t\"Too late to call FetchEvent.respondWith(). It must be called synchronously in the event handler.\",\n\t\t\t\t\"InvalidStateError\"\n\t\t\t);\n\t\t}\n\t\tthis.stopImmediatePropagation();\n\t\tthis[__facade_response__] = response;\n\t}\n\n\tpassThroughOnException() {\n\t\tif (!(this instanceof __Facade_FetchEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#passThroughOnException();\n\t}\n}\n\ninterface ScheduledEventInit extends EventInit {\n\tscheduledTime: number;\n\tcron: string;\n\tnoRetry: ScheduledEvent[\"noRetry\"];\n}\n\nclass __Facade_ScheduledEvent__ extends __Facade_ExtendableEvent__ {\n\t#scheduledTime: number;\n\t#cron: string;\n\t#noRetry: ScheduledEvent[\"noRetry\"];\n\n\tconstructor(type: \"scheduled\", init: ScheduledEventInit) {\n\t\tsuper(type);\n\t\tthis.#scheduledTime = init.scheduledTime;\n\t\tthis.#cron = init.cron;\n\t\tthis.#noRetry = init.noRetry;\n\t}\n\n\tget scheduledTime() {\n\t\treturn this.#scheduledTime;\n\t}\n\n\tget cron() {\n\t\treturn this.#cron;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\n__facade__originalAddEventListener__(\"fetch\", (event) => {\n\tconst ctx: ExecutionContext = {\n\t\twaitUntil: event.waitUntil.bind(event),\n\t\tpassThroughOnException: event.passThroughOnException.bind(event),\n\t};\n\n\tconst __facade_sw_dispatch__: Dispatcher = function (type, init) {\n\t\tif (type === \"scheduled\") {\n\t\t\tconst facadeEvent = new __Facade_ScheduledEvent__(\"scheduled\", {\n\t\t\t\tscheduledTime: Date.now(),\n\t\t\t\tcron: init.cron ?? \"\",\n\t\t\t\tnoRetry() {},\n\t\t\t});\n\n\t\t\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\t\t\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n\t\t}\n\t};\n\n\tconst __facade_sw_fetch__: Middleware = function (request, _env, ctx) {\n\t\tconst facadeEvent = new __Facade_FetchEvent__(\"fetch\", {\n\t\t\trequest,\n\t\t\tpassThroughOnException: ctx.passThroughOnException,\n\t\t});\n\n\t\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\t\tfacadeEvent[__facade_dispatched__] = true;\n\t\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n\n\t\tconst response = facadeEvent[__facade_response__];\n\t\tif (response === undefined) {\n\t\t\tthrow new Error(\"No response!\"); // TODO: proper error message\n\t\t}\n\t\treturn response;\n\t};\n\n\tevent.respondWith(\n\t\t__facade_invoke__(\n\t\t\tevent.request as IncomingRequest,\n\t\t\tglobalThis,\n\t\t\tctx,\n\t\t\t__facade_sw_dispatch__,\n\t\t\t__facade_sw_fetch__\n\t\t)\n\t);\n});\n\n__facade__originalAddEventListener__(\"scheduled\", (event) => {\n\tconst facadeEvent = new __Facade_ScheduledEvent__(\"scheduled\", {\n\t\tscheduledTime: event.scheduledTime,\n\t\tcron: event.cron,\n\t\tnoRetry: event.noRetry.bind(event),\n\t});\n\n\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n});\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport { __facade_registerInternal__ } from \"C:\\\\Users\\\\young\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\loader-sw.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\young\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\young\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\t\t\t\t__facade_registerInternal__([__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default])", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "\nexport async function sendMessage(chatId, text, options = {}) {\n  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;\n  const payload = {\n    chat_id: chatId,\n    text: text,\n    parse_mode: 'Markdown',\n    ...options,\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  });\n\n  if (!response.ok) {\n    console.error('Failed to send message:', await response.text());\n  }\n  return response;\n}\n\nexport async function editMessageText(chatId, messageId, text, options = {}) {\n  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`;\n  const payload = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: text,\n    parse_mode: 'Markdown',\n    ...options,\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  });\n\n  if (!response.ok) {\n    console.error('Failed to edit message:', await response.text());\n  }\n  return response;\n}\n\nexport async function answerCallbackQuery(callbackQueryId, text) {\n  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`;\n  const payload = {\n    callback_query_id: callbackQueryId,\n    text: text,\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  });\n\n  if (!response.ok) {\n    console.error('Failed to answer callback query:', await response.text());\n  }\n}\n", "\nimport { sendMessage } from '../telegram';\n\nexport async function handleStart(chatId) {\n  const message = `\uD83C\uDF89 Welcome to SubsTrackerBot! \uD83C\uDF89\n\nI can help you keep track of all your subscriptions.`;\n  const keyboard = {\n    inline_keyboard: [\n      [\n        { text: '\uD83D\uDCCB View Subscriptions', callback_data: 'list' },\n        { text: '\u2795 Add Subscription', callback_data: 'info' },\n      ],\n    ],\n  };\n\n  await sendMessage(chatId, message, { reply_markup: JSON.stringify(keyboard) });\n}\n", "\nexport async function listSubscriptions(chatId) {\n  const data = await DB.get(chatId.toString(), { type: 'json' });\n  return data || [];\n}\n\nexport async function addSubscription(chatId, subscription) {\n  const subs = await listSubscriptions(chatId);\n  subs.push(subscription);\n  await DB.put(chatId.toString(), JSON.stringify(subs));\n}\n\nexport async function deleteSubscription(chatId, index) {\n  const subs = await listSubscriptions(chatId);\n  if (index >= 0 && index < subs.length) {\n    subs.splice(index, 1);\n    await DB.put(chatId.toString(), JSON.stringify(subs));\n    return true;\n  }\n  return false;\n}\n", "\nimport { sendMessage } from '../telegram';\nimport { addSubscription } from '../kv';\n\nexport async function handleAdd(chatId, text) {\n  const parts = text.split(' ');\n  if (parts.length !== 4) {\n    await sendMessage(chatId, 'Oops! It looks like the format is wrong. Please use: /add <name> <amount> <date>');\n    return;\n  }\n\n  const [, name, amount, date] = parts;\n  const subscription = { name, amount, date };\n\n  await addSubscription(chatId, subscription);\n  await sendMessage(chatId, `\u2705 Subscription added successfully!\n\n*Name:* ${name}\n*Amount:* ${amount}\n*Date:* ${date}`);\n}\n", "\n\nimport { sendMessage, editMessageText } from '../telegram';\nimport { listSubscriptions } from '../kv';\n\nexport async function handleList(chatId, messageId) {\n  const subs = await listSubscriptions(chatId);\n\n  if (subs.length === 0) {\n    const message = 'You have no subscriptions yet. Try adding one with /add!';\n    if (messageId) {\n      await editMessageText(chatId, messageId, message, { reply_markup: JSON.stringify({ inline_keyboard: [[{ text: '\u2795 Add Subscription', callback_data: 'info' }]] }) });\n    } else {\n      await sendMessage(chatId, message, { reply_markup: JSON.stringify({ inline_keyboard: [[{ text: '\u2795 Add Subscription', callback_data: 'info' }]] }) });\n    }\n    return;\n  }\n\n  const message = 'Here are your subscriptions:';\n  const keyboard = {\n    inline_keyboard: subs.map((s, i) => [\n      {\n        text: `*${s.name}* - ${s.amount} - ${s.date}`,\n        callback_data: `noop_${i}`,\n      },\n      {\n        text: '\uD83D\uDDD1\uFE0F Delete',\n        callback_data: `delete_${i}`,\n      },\n    ]),\n  };\n\n  if (messageId) {\n    await editMessageText(chatId, messageId, message, { reply_markup: JSON.stringify(keyboard) });\n  } else {\n    await sendMessage(chatId, message, { reply_markup: JSON.stringify(keyboard) });\n  }\n}\n\n", "\nimport { answerCallbackQuery } from '../telegram';\nimport { deleteSubscription } from '../kv';\nimport { handleList } from './list';\n\nexport async function handleDelete(chatId, callbackQuery) {\n  const index = parseInt(callbackQuery.data.split('_')[1], 10);\n  const deleted = await deleteSubscription(chatId, index);\n  if (deleted) {\n    await answerCallbackQuery(callbackQuery.id, '\u2705 Subscription deleted successfully.');\n    await handleList(chatId, callbackQuery.message.message_id);\n  } else {\n    await answerCallbackQuery(callbackQuery.id, '\u274C Failed to delete subscription. Please try again.');\n  }\n}\n", "import { sendMessage } from '../telegram';\n\nexport async function handleInfo(chatId) {\n  const message = 'To add a new subscription, use the following format:\\n\\n' +\n                  '`/add <name> <amount> <date>`\\n\\n' +\n                  'For example:\\n' +\n                  '`/add Netflix 15.99 2023-12-25`';\n  await sendMessage(chatId, message);\n}\n", "\nimport { listSubscriptions } from './kv';\nimport { sendMessage } from './telegram';\n\nexport async function handleCron() {\n  // This is a simplified cron handler. In a real-world scenario, you'd\n  // need a way to get all chat IDs, which might require storing them\n  // in a separate KV key or using a different database.\n  // For this example, we'll assume we have a list of chat IDs.\n\n  // const chatIds = await getAllChatIds(); // Function to be implemented\n  const chatIds = []; // Placeholder\n\n  for (const chatId of chatIds) {\n    const subs = await listSubscriptions(chatId);\n    const today = new Date();\n\n    for (const sub of subs) {\n      const subDate = new Date(sub.date);\n      const diffTime = Math.abs(subDate - today);\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n      if (diffDays <= 3) {\n        await sendMessage(\n          chatId,\n          `Your subscription for ${sub.name} is due on ${sub.date}.`\n        );\n      }\n    }\n  }\n}\n", "\nimport { Router } from 'itty-router';\nimport { handleStart } from './commands/start';\nimport { handleAdd } from './commands/add';\nimport { handleList } from './commands/list';\nimport { handleDelete } from './commands/delete';\nimport { handleInfo } from './commands/info';\nimport { handleCron } from './cron';\n\nconst router = Router();\n\nrouter.post('/', async (request) => {\n  const { message, callback_query } = await request.json();\n\n  if (message) {\n    const { chat, text } = message;\n    const command = text.split(' ')[0];\n\n    switch (command) {\n      case '/start':\n        await handleStart(chat.id);\n        break;\n      case '/add':\n        await handleAdd(chat.id, text);\n        break;\n      case '/list':\n        await handleList(chat.id);\n        break;\n      default:\n        // You can add a default handler for unknown commands\n        break;\n    }\n  } else if (callback_query) {\n    const { from, data, message } = callback_query;\n    const command = data.split('_')[0];\n\n    switch (command) {\n      case 'list':\n        await handleList(from.id, message.message_id);\n        break;\n      case 'info':\n        await handleInfo(from.id);\n        break;\n      case 'delete':\n        await handleDelete(from.id, callback_query);\n        break;\n      default:\n        // You can add a default handler for unknown commands\n        break;\n    }\n  }\n\n  return new Response('OK');\n});\n\nrouter.get('/cron', async () => {\n  await handleCron();\n  return new Response('Cron job executed');\n});\n\nexport function handleRequest(request) {\n  return router.handle(request);\n}\n", "import { handleRequest } from './src/handler';\n\naddEventListener('fetch', (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n\naddEventListener('scheduled', (event) => {\n  event.waitUntil(handleCron());\n});"],
  "mappings": "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",
  "names": ["ctx", "Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "t", "handler", "before", "proxy", "outer", "method", "regex", "pathname", "params", "groups", "err", "catch", "finally", "createResponse", "format", "transform", "body", "options", "Response", "headers", "set", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "message", "handleCron", "message", "handleCron"]
}
